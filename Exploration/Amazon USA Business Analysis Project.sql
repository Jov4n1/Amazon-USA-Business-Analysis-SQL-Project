-- Amazon USA Explorotary Data Analysis 

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Return: product name, total quantity sold, and total sales value.
*/

-- Preview the order_items table
SELECT * FROM order_items;


-- Add a new column to calculate total sales for each item
ALTER TABLE order_items
ADD COLUMN total_sale FLOAT; 


-- Populate the total_sales column with calculated values
UPDATE order_items
SET total_sale = quantity * price_per_unit;
SELECT * FROM order_items;

-- Verify order items by sorting based on quantity sold
SELECT * FROM order_items
ORDER BY quantity DESC;


-- Join order_items, orders, and products tables 
-- to calculate total sales and total orders for each product
SELECT 
	 oi.product_id,
	 p.product_name,
	 ROUND(SUM(oi.total_sale)::numeric, 2) AS total_sales,
	 COUNT(o.order_id) AS total_orders
FROM 
	order_items AS oi
JOIN
	orders AS o ON o.order_id = oi.order_id
JOIN
	products AS p ON p.product_id = oi.product_id
GROUP BY
	oi.product_id, 
	p.product_name
ORDER BY
	total_sales DESC
LIMIT 10;

/*
2. Revenue by Category
Objective: Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to overall revenue.
*/

-- Joining order_items, categories and products to do calculations
SELECT 
	p.category_id,
	c.category_name,
	ROUND(SUM(oi.total_sale)::numeric, 2) as total_sale,
	ROUND((SUM(oi.total_sale)::numeric / (SELECT SUM(total_sale)::numeric FROM order_items) * 100), 2)
	AS contribution
FROM 
	order_items as oi
JOIN
	products as p
	ON p.product_id = oi.product_id
LEFT JOIN 
	category as c
	ON c.category_id = p.category_id
GROUP BY 
	p.category_id,
	c.category_id
ORDER BY
	total_sale DESC;


/*
3. Customer Lifetime Value (cx_lifetime_value)
Objective: Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their lifetime_value.
*/

-- Aggregate data to compute total orders, average order value, and total customer lifetime value
SELECT
    c.customer_id,
    CONCAT(c.first_name, ' ', c.last_name) AS full_name,
	COUNT(DISTINCT o.order_id) AS total_orders,
	ROUND(AVG(oi.quantity * oi.price_per_unit)::numeric, 2) AS avg_order_value,
    ROUND(SUM(oi.total_sale)::numeric, 2) AS cx_lifetime_value,
	DENSE_RANK() OVER(ORDER BY ROUND(SUM(oi.total_sale)::numeric, 2)DESC) AS cx_ranking
FROM 
    customers AS c
JOIN
    orders AS o
    ON o.customer_id = c.customer_id
JOIN
    order_items AS oi
    ON oi.order_id = o.order_id
GROUP BY
    c.customer_id,
    full_name
ORDER BY
	cx_lifetime_value DESC;
	

/*
4. Monthly Sales Trend
Objective: Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

-- Calculate total sales for each month (SUM of total_sale), grouped by year and month
-- Use the LAG window function to get the previous month's sales for comparison
SELECT 
	year,
	month,
	total_sale as current_month_sale,
	LAG(total_sale, 1) OVER (ORDER BY year, month) as last_month_sale
FROM
(
SELECT
	EXTRACT(MONTH FROM order_date) AS month,
	EXTRACT(YEAR FROM order_date) AS year,
	ROUND(SUM(oi.total_sale ::numeric),2) as total_sale
FROM
	orders AS o
JOIN
	order_items AS oi
	ON oi.order_id = o.order_id
WHERE
	order_date >= CURRENT_DATE - INTERVAL '2 year'
GROUP BY
	month,
	year
ORDER BY 
	year,
	month
	) AS t1;

/*
5. Product Profit Margin
Objective: Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/

-- Compute profit margins by comparing sales revenue and cost of goods sold for each product
--   (Total Sales - Total Cost) / Total Sales * 100
SELECT
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER(ORDER BY profit_margin DESC) AS product_ranking
FROM
(
	SELECT
	    p.product_id,
	    p.product_name,
	    -- ROUND(SUM(total_sale - (p.cogs * oi.quantity))::numeric, 2) AS profit,
	    ROUND((SUM(total_sale - (p.cogs * oi.quantity))::numeric / SUM(total_sale)::numeric * 100), 0) AS profit_margin
	FROM 
	    orders AS o
	JOIN 
	    order_items AS oi
	    ON o.order_id = oi.order_id
	JOIN 
	    products AS p
	    ON p.product_id = oi.product_id
	GROUP BY
	    p.product_id,
	    p.product_name
) AS t1;

/*
6. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/


SELECT
	i.inventory_id,
	p.product_name,
	i.stock AS current_stock_remaining,
	i.last_stock_date,
	i.warehouse_id
FROM 
	inventory AS i
JOIN
	products AS p
	ON p.product_id = i.product_id
WHERE stock < 10;

/*
7. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/


SELECT
	c.customer_id,
	CONCAT(c.first_name, ' ', c.last_name) AS full_name,
	o.order_id,
	o.order_date,
	o.order_status,
	s.shipping_providers,
	s.shipping_date - o.order_date AS days_took_to_ship
FROM
	orders AS o
JOIN
	customers AS c
	ON c.customer_id = o.customer_id
JOIN
	shippings AS s
	ON s.order_id = o.order_id
WHERE
	s.shipping_date - o.order_date > 3;

/*
8. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

-- Compute return rate for each product as:
--   (Total Returned Units / Total Units Sold) * 100
-- Return the top 10 products ranked by return percentage
SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	ROUND(SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/COUNT(*)::numeric * 100, 0) as return_percentage
FROM 
	order_items as oi
JOIN 
	products as p
	ON oi.product_id = p.product_id
JOIN 
	orders as o
	ON o.order_id = oi.order_id
GROUP BY 
	p.product_id,
	p.product_name
ORDER BY 
	return_percentage DESC
LIMIT 10;
